/**
 * domain: 分成(1-5)5个聚合
 *  1.carsource(车源):
 *    1.1 event(领域事件):
 *      1.1.1 领域事件用于聚合间或上下文间的解耦，当一个聚合完成一个逻辑之后，发送事件通知其他聚合或其他上下文响应事件，这样通过事件流完成整个业务流程
 *    1.2 factory(工厂):
 *      1.2.1 工厂用于创建属性很多的聚合根，属性少的可以直接在聚合根上写静态构造方法
 *    1.3 service(领域服务):
 *      1.3.1 当业务逻辑无法单独放在聚合根实体、子实体和值对象上，需要多个领域对象协助完成时，就需要用到领域服务
 *    1.4 spec(领域规范:specification): 业务校验类，
 *      1.4.1 当业务校验很多/很复杂，需要借助于南向网关的端口完成时，可以定义一个Spec后缀的业务校验类，优点：业务校验逻辑内聚、可复用
 *      1.4.2 当聚合根借助自身属性就能完成业务校验时，可以直接写在聚合根的方法里
 *    1.5 valobj(值对象)：
 *      1.5.1 用于归类属性字段，内聚自身业务逻辑。
 *    1.6 每个聚合包下，至少有一个聚合根(CarSource)
 *    1.7 CarSourceUpdater: 聚合根更新器，作为聚合根数据更新的承载对象，前置数据校验，隔离命令请求入参和聚合根之间的耦合。
 *  2.goods(渠道货品):
 *  3.inventory(库存):
 *  4.pricing(定价策略):
 *  5.product(渠道商品):
 *  6.shared(聚合间的共享内核)：
 */

 /**
  * inbound(输入端/北向网关)：
  * 1.remote(远程服务)：
  *   1.1 controller(控制器接口):
  *   1.2 provider(feign接口提供者): feign接口实现类
  *   1.3 consumer(消息消费者)：
  * 2.local(本地服务)：
  *   2.1 assembler(组装器): 把远程服务的请求参数组装成领域层的领域对象，供领域层的业务逻辑使用
  *   2.2 listener(本地事件监听器)：聚合间发送领域事件(SpringUtil.publishEvent), 这个包定义接口，由local.service.cmd的命令端应用服务实现
  *     2.2.1 常用注解：@EventListener(会和发送事件方法公用一个事务) @TransactionalEventListener(发送事件方法事务提交之后再执行) @Async(异步执行事件消费)
  *   2.3 service(应用服务)：按CQRS把应用服务分离成C端和Q端
  *     2.3.1 cmd(命令端应用服务)：增删改方法，需要经过领域层，负责组合编排领域服务，完成整个业务用例。
  *     2.3.2 qry(查询端应用服务)：查询方法，直接依赖注入Mapper/Dao接口,直接查controller或provider需要的DTO, 不需要经过领域层
  */



 **
  * 基础设施层：放配置(config/property)、常量(constant)、持久化(persistence)、 aop、拦截器(interceptor)、过滤器(filter)、转换器(converter)、工具类等
  */


/**
 * outbound(输出端/南向网关)：
 * 1.port(端口):
 *   1.1 client(防腐层接口):
 *   1.2 repository(仓储接口):
 *   1.3 publisher(消息发布者接口):
 * 2.adapter(适配器):
 *   2.1 client(防腐层实现): 适配其他微服务的feign接口或缓存等第三方服务接口，入参和反参必须是领域对象或单个基础类型，不能用DTO(会污染领域层，领域层没有DTO这个概念)
 *   2.2 repository(仓储实现): 适配数据持久化接口
 *   2.3 publisher(消息发布者实现): 适配事件总线和MQ接口
 */